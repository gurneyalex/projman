"""
unit tests for module logilab.projman.lib.Task
squeleton generated by /home/syt/bin/py2tests on Jan 19 at 15:00:33


Projman - (c)2000-2002 LOGILAB <contact@logilab.fr> - All rights reserved.

Home: http://www.logilab.org/projman

Manipulate a xml project description.

This code is released under the GNU Public Licence v2. See www.gnu.org.

"""
__revision__ = "$Id: unittest_reader_planner.py,v 1.5 2005-09-06 18:27:46 nico Exp $"

import unittest
import sys
from projman.lib import *
from projman.readers import PlannerXMLReader
from projman.lib.constants import BEGIN_AT_DATE, BEGIN_AFTER_END
from mx.DateTime import DateTime, Time
    
class PlannerXMLReaderTC(unittest.TestCase):
    """
    Task represents a task or a group of tasks when it has children
    """
    def setUp(self):
        """ called before each test from this class """
        self.o = Project()
        self.o.title = 'Project'
        self.o.root_task = Task('t_0')
        
        self.o0 = Task('t_1')
        self.o0.title = 'Task 0'
        self.o0.progress = 0.5
        #self.o0.duration = 2

        self.o1 = Task('t_2')
        self.o1.title = 'Task 1'
        self.o1.progress = 1
        #self.o1.duration = 2
        
        self.o2 = Task('t_3')
        self.o2.title = 'Task 2'
        self.o2.progress = 0
        #self.o2.duration = 3
        self.o2.add_date_constraint(BEGIN_AT_DATE, DateTime(2004, 04, 11))
        self.o2.add_task_constraint(BEGIN_AFTER_END, 'task1')
        self.o.root_task.append(self.o0)
        self.o.root_task.append(self.o1)
        self.o.root_task.append(self.o2)

        self.r1 = Resource('r_1', 'Resource 1')
        self.r1.calendar = 'c_1'
        self.r1.type = '1'

        self.r2 = Resource('r_2', 'Resource 2')
        self.r2.calendar = 'c_2'
        self.r2.type = '1'

        type_working_days_c1 = {0:['Working', [(Time(float(8), float(0)), Time(float(12), float(0))), (Time(float(13), float(0)), Time(float(17), float(0)))]]}
        type_nonworking_days_c1 = {0:'Use base', 1:'Nonworking'}
        type_working_days_c2 = {}
        type_nonworking_days_c2 = {0:'Use base', 1:'Nonworking'}
        
        self.c1 = Calendar('c_1', 'Defaut')
        self.c1.type_working_days = type_working_days_c1
        self.c1.type_nonworking_days = type_nonworking_days_c1
        self.c2 = Calendar('c_2', 'Calendrier 2') 
        self.c1.append(self.c2)
        self.c2.type_working_days = type_working_days_c2
        self.c2.type_nonworking_days = type_nonworking_days_c2
        date = DateTime(2004, 05, 07)
        self.c2.add_timeperiod(date, date, 'Nonworking')
        from_date = DateTime(2004, 06, 12)
        to_date = DateTime(2004, 06, 23)
        self.c2.add_timeperiod(from_date, to_date, 'Nonworking')
        self.c1.weekday['mon'] = 'Working'
        self.c1.weekday['tue'] = 'Working'
        self.c1.weekday['wed'] = 'Working'
        self.c1.weekday['thu'] = 'Working'
        self.c1.weekday['fri'] = 'Working'
        self.c1.weekday['sat'] = 'Nonworking'
        self.c1.weekday['sun'] = 'Nonworking'
        
        self.c2.weekday['mon'] = 'Use base'
        self.c2.weekday['tue'] = 'Use base'
        self.c2.weekday['wed'] = 'Use base'
        self.c2.weekday['thu'] = 'Use base'
        self.c2.weekday['fri'] = 'Use base'
        self.c2.weekday['sat'] = 'Use base'
        self.c2.weekday['sun'] = 'Use base'

        self.c1.append(self.c2)
        self.rss = ResourcesSet('all_resources')
        self.rss.add_resource(self.r1)
        self.rss.add_resource(self.r2)
        self.rss.add_calendar(self.c1)

        #self.reader = PlannerXMLReader()
        
        
    def test_known_values_fromFile(self):
        """ 
        return the projman object associated to the planner xml description
        """
        reader = PlannerXMLReader()
        path = reader.fromFile('data/planner_desc.mrproject')
        rss_fromFile = path.resource_sets[0]
        project = path.projects[0]
        
        keys = []
        for key in self.rss.children + rss_fromFile.children:
            if key.TYPE == 'resource' and key.id not in keys:
                keys.append(key.id)
        
        for r_init in keys:
            r1 = self.rss.get_resource(r_init)
            r2 = rss_fromFile.get_resource(r_init)
            self.assertEqual(r1.id, r2.id)
            self.assertEqual(r1.name, r2.name)
            self.assertEqual(r1.type, r2.type)
            #self.assertEqual(self.rss.get_resource(r_init), rss_fromFile.get_resource(r_fromFile), None)
        
        keys = [] 
        for key in self.rss.children + rss_fromFile.children:
            if key.TYPE == 'calendar' and key.id not in keys:
                keys.append(key.id)
        for c_init in keys:
            c1 = self.rss.get_calendar(c_init)
            c2 = rss_fromFile.get_calendar(c_init)
            self.assertEqual(c1.id, c2.id)
            self.assertEqual(c1.name, c2.name)
            self.assertEqual(c1.type_working_days, c2.type_working_days)
            self.assertEqual(c1.type_nonworking_days, c2.type_nonworking_days)
            self.assertEqual(c1.weekday, c2.weekday)
            self.assertEqual(c1.timeperiods, c2.timeperiods)
            self.assertEqual(c1.start_on, c2.start_on)
            self.assertEqual(c1.stop_on, c2.stop_on)
        self.assertEqual(len(project.children), len(self.o.children))
        
        
        for task, file_task in zip(project.children, self.o.children):
            self.assertEqual(task.priority, file_task.priority) 
            self.assertEqual(task.progress, file_task.progress)
            self.assertEqual(task.title, file_task.title)

if __name__ == '__main__':
    unittest.main()
